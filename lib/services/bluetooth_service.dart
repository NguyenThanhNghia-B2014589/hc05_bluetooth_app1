import 'dart:async';
import 'dart:convert';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import '../models/bluetooth_device.dart';

// L·ªõp n√†y qu·∫£n l√Ω to√†n b·ªô tr·∫°ng th√°i v√† logic Bluetooth
class BluetoothService {
  // Singleton pattern: ƒê·∫£m b·∫£o ch·ªâ c√≥ m·ªôt th·ª±c th·ªÉ c·ªßa service n√†y trong to√†n b·ªô ·ª©ng d·ª•ng
  static final BluetoothService _instance = BluetoothService._internal();
  factory BluetoothService() => _instance;
  BluetoothService._internal();

  // Channels
  static const _methodChannel = MethodChannel('com.hc.bluetooth.method_channel');
  static const _eventChannel = EventChannel('com.hc.bluetooth.event_channel');
  StreamSubscription? _eventSubscription;

  // Notifiers: C√°c widget s·∫Ω l·∫Øng nghe nh·ªØng notifier n√†y ƒë·ªÉ c·∫≠p nh·∫≠t UI
  final ValueNotifier<List<BluetoothDevice>> scanResults = ValueNotifier([]);
  final ValueNotifier<BluetoothDevice?> connectedDevice = ValueNotifier(null);
  final ValueNotifier<String> status = ValueNotifier('S·∫µn s√†ng');
  final ValueNotifier<double> currentWeight = ValueNotifier(0.0);
  final ValueNotifier<bool> isScanning = ValueNotifier(false);
  
  // Map n·ªôi b·ªô ƒë·ªÉ qu·∫£n l√Ω c√°c thi·∫øt b·ªã ƒë√£ qu√©t
  final Map<String, BluetoothDevice> _scannedDevices = {};

  // --- TH√äM C√ÅC BI·∫æN CHO VI·ªÜC ƒêI·ªÄU TI·∫æT D·ªÆ LI·ªÜU ---
  //bool _isThrottling = false; // Bi·∫øn n√†y ho·∫°t ƒë·ªông nh∆∞ c√°i "c·ªïng"
  //final int _throttleMilliseconds = 500; // C·∫•u h√¨nh th·ªùi gian ch·ªù (500ms = 0.5 gi√¢y)

  // Kh·ªüi t·∫°o service, b·∫Øt ƒë·∫ßu l·∫Øng nghe s·ª± ki·ªán t·ª´ native
  void initialize() {
    if (_eventSubscription != null) return; // Ch·ªâ kh·ªüi t·∫°o m·ªôt l·∫ßn
    _eventSubscription = _eventChannel.receiveBroadcastStream().listen(_onEvent, onError: _onError);
  }

  void _onEvent(dynamic event) {
    final String eventType = event['type'];
    switch (eventType) {
      case 'scanResult':
        final device = BluetoothDevice(
          name: event['name'] ?? 'N/A', address: event['address'], rssi: int.tryParse(event['rssi'] ?? '0') ?? 0,
        );
        _scannedDevices[device.address] = device;
        scanResults.value = _scannedDevices.values.toList();
        break;
      case 'status':
        status.value = event['message'];
        if (event['status'] == 'connected') {
          connectedDevice.value = _scannedDevices[event['address']];
        } else if (event['status'] == 'error' || event['status'] == 'disconnected') {
          connectedDevice.value = null;
        } else if (event['status'] == 'scanFinished') {
          isScanning.value = false;
        }
        break;
    
      case 'dataReceived':
        // L·∫•y d·ªØ li·ªáu th√¥ v√† chuy·ªÉn th√†nh chu·ªói String
        final String rawDataString = utf8.decode(event['data']).trim();
        
        // In ra ƒë·ªÉ ch·∫©n ƒëo√°n. ƒê√¢y l√† b∆∞·ªõc quan tr·ªçng nh·∫•t!
        //print('üîµ D·ªØ li·ªáu th√¥ nh·∫≠n ƒë∆∞·ª£c: "$rawDataString"');

        // S·ª≠ d·ª•ng Bi·ªÉu th·ª©c ch√≠nh quy (RegExp) ƒë·ªÉ t√¨m s·ªë trong chu·ªói
        // N√≥ c√≥ th·ªÉ t√¨m th·∫•y s·ªë nh∆∞ "123.45" trong c√°c chu·ªói "W:123.45", "N·∫∑ng 123.45g", v.v.
        final RegExp numberRegex = RegExp(r'(\d+\.?\d*)');
        final Match? match = numberRegex.firstMatch(rawDataString);

        if (match != null) {
          // N·∫øu t√¨m th·∫•y m·ªôt s·ªë trong chu·ªói
          final String numberString = match.group(1)!;
          final double? weight = double.tryParse(numberString);
          
          if (weight != null) {
            //print('‚úÖ Parse th√†nh c√¥ng: $weight');
            currentWeight.value = weight; // C·∫≠p nh·∫≠t giao di·ªán
          } else {
            if (kDebugMode) {
              print('‚ùå L·ªói: T√¨m th·∫•y chu·ªói s·ªë "$numberString" nh∆∞ng kh√¥ng parse ƒë∆∞·ª£c.');
            }
          }
        } else {
          // N·∫øu kh√¥ng t√¨m th·∫•y b·∫•t k·ª≥ s·ªë n√†o trong chu·ªói
          if (kDebugMode) {
            print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ªë n√†o trong chu·ªói nh·∫≠n ƒë∆∞·ª£c.');
          }
        }
        break;

      /* case 'dataReceived':
        // N·∫øu "c·ªïng" ƒëang ƒë√≥ng, b·ªè qua d·ªØ li·ªáu v√† tho√°t ngay
        if (_isThrottling) {
          print('üíß D·ªØ li·ªáu b·ªã b·ªè qua do throttling.');
          return;
        }

        // N·∫øu "c·ªïng" ƒëang m·ªü, cho d·ªØ li·ªáu ƒëi qua v√† ƒë√≥ng c·ªïng l·∫°i ngay
        _isThrottling = true;
        
        // L√™n l·ªãch ƒë·ªÉ "m·ªü c·ªïng" tr·ªü l·∫°i sau kho·∫£ng th·ªùi gian _throttleMilliseconds
        Future.delayed(Duration(milliseconds: _throttleMilliseconds), () {
          _isThrottling = false;
        });

        // X·ª≠ l√Ω g√≥i d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ƒëi qua c·ªïng
        final String rawDataString = utf8.decode(event['data']).trim();
        print('üîµ D·ªØ li·ªáu th√¥ nh·∫≠n ƒë∆∞·ª£c (ƒë√£ qua throttling): "$rawDataString"');

        final RegExp numberRegex = RegExp(r'(\d+\.?\d*)');
        final Match? match = numberRegex.firstMatch(rawDataString);

        if (match != null) {
          final String numberString = match.group(1)!;
          final double? weight = double.tryParse(numberString);
          if (weight != null) {
            print('‚úÖ Parse th√†nh c√¥ng: $weight');
            currentWeight.value = weight;
          } else {
            print('‚ùå L·ªói: T√¨m th·∫•y chu·ªói s·ªë "$numberString" nh∆∞ng kh√¥ng parse ƒë∆∞·ª£c.');
          }
        } else {
          print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·ªë n√†o trong chu·ªói nh·∫≠n ƒë∆∞·ª£c.');
        }
        break; */
    }
  }

  void _onError(dynamic error) {
    status.value = 'L·ªói nh·∫≠n s·ª± ki·ªán: ${error.message}';
  }

  // C√°c h√†m public ƒë·ªÉ UI c√≥ th·ªÉ g·ªçi
  Future<void> startScan() async {
    isScanning.value = true;
    status.value = 'ƒêang qu√©t...';
    _scannedDevices.clear();
    scanResults.value = [];
    await _methodChannel.invokeMethod('startScan');
  }

  Future<void> stopScan() async {
    isScanning.value = false;
    status.value = 'ƒê√£ d·ª´ng qu√©t.';
    await _methodChannel.invokeMethod('stopScan');
  }

  Future<void> connectToDevice(BluetoothDevice device) async {
    status.value = 'ƒêang k·∫øt n·ªëi t·ªõi ${device.name}...';
    await _methodChannel.invokeMethod('connect', {'address': device.address});
  }

  Future<void> disconnect() async {
    if (connectedDevice.value != null) {
      await _methodChannel.invokeMethod('disconnect', {'address': connectedDevice.value!.address});
      connectedDevice.value = null;
      status.value = 'ƒê√£ ng·∫Øt k·∫øt n·ªëi.';
    }
  }

  Future<void> sendData(String textData) async {
    if (connectedDevice.value == null) return;
    final Uint8List byteData = utf8.encode('$textData\n');
    await _methodChannel.invokeMethod('sendData', {
      'address': connectedDevice.value!.address,
      'data': byteData,
    });
  }

  void dispose() {
    _eventSubscription?.cancel();
    _eventSubscription = null;
  }
}